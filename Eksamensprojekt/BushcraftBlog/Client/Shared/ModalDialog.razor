@inject HttpClient Http
@inject NavigationManager Navigation

<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Delete Document ?</h3>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="Close" />
            </div>
            <div class="modal-body">
                <h4>Name: @ModalDocName</h4>
                <h5>Id: @ModalDocId</h5>
                <hr>
                <button class="mx-3 w-25 card-link btn btn-outline-primary" @onclick="() => Close()">Close</button>
                <button class="mx-3 w-25 card-link btn btn-outline-danger" @onclick="() => DeleteDocument(ModalDocId)">Yes</button>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string ModalDocName { get; set; }
    private int ModalDocId { get; set; }
    private bool HideSpinner { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string modalDisplay = "none;";
    private string modalClass = string.Empty;
    private bool showBackdrop = false;

    private async void DeleteDocument(int documentId)
    {
        await Http.DeleteAsync($"api/documents/{documentId}");
        Thread.Sleep(500);
        this.Close();

        Thread.Sleep(500);
        Navigation.NavigateTo($"/documents/crud", true);
    }

    public void Open(int docId, string docName)
    {
        ModalDocName = docName;
        ModalDocId = docId;

        modalDisplay = "block";
        modalClass = "show";
        showBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        modalDisplay = "none";
        modalClass = string.Empty;
        showBackdrop = false;
        StateHasChanged();
    }
}
